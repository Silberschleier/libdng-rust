/* automatically generated by rust-bindgen 0.58.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Area {
    pub top: ::std::os::raw::c_ushort,
    pub left: ::std::os::raw::c_ushort,
    pub bottom: ::std::os::raw::c_ushort,
    pub right: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_Area() {
    assert_eq!(
        ::std::mem::size_of::<Area>(),
        8usize,
        concat!("Size of: ", stringify!(Area))
    );
    assert_eq!(
        ::std::mem::align_of::<Area>(),
        2usize,
        concat!("Alignment of ", stringify!(Area))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area>())).top as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Area), "::", stringify!(top))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area>())).left as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Area),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area>())).bottom as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Area),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area>())).right as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Area),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageInfoContainer {
    pub make: *const ::std::os::raw::c_char,
    pub model: *const ::std::os::raw::c_char,
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
    pub black_levels: [f64; 4usize],
    pub white_levels: [f64; 4usize],
    pub camera_neutral: [f64; 3usize],
    pub xyz_to_cam: [[f32; 3usize]; 3usize],
    pub active_area: Area,
}
#[test]
fn bindgen_test_layout_ImageInfoContainer() {
    assert_eq!(
        ::std::mem::size_of::<ImageInfoContainer>(),
        160usize,
        concat!("Size of: ", stringify!(ImageInfoContainer))
    );
    assert_eq!(
        ::std::mem::align_of::<ImageInfoContainer>(),
        8usize,
        concat!("Alignment of ", stringify!(ImageInfoContainer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).make as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(make)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).model as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).height as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).black_levels as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(black_levels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).white_levels as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(white_levels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImageInfoContainer>())).camera_neutral as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(camera_neutral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).xyz_to_cam as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(xyz_to_cam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).active_area as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(active_area)
        )
    );
}
