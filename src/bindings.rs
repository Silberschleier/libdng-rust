/* automatically generated by rust-bindgen 0.58.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Area {
    pub top: ::std::os::raw::c_ushort,
    pub left: ::std::os::raw::c_ushort,
    pub bottom: ::std::os::raw::c_ushort,
    pub right: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_Area() {
    assert_eq!(
        ::std::mem::size_of::<Area>(),
        8usize,
        concat!("Size of: ", stringify!(Area))
    );
    assert_eq!(
        ::std::mem::align_of::<Area>(),
        2usize,
        concat!("Alignment of ", stringify!(Area))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area>())).top as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Area), "::", stringify!(top))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area>())).left as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Area),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area>())).bottom as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Area),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area>())).right as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Area),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageInfoContainer {
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
    pub black_levels: [f64; 4usize],
    pub white_levels: [f64; 4usize],
    pub camera_neutral: [f64; 3usize],
    pub xyz_to_cam: [[f32; 3usize]; 3usize],
    pub active_area: Area,
}
#[test]
fn bindgen_test_layout_ImageInfoContainer() {
    assert_eq!(
        ::std::mem::size_of::<ImageInfoContainer>(),
        144usize,
        concat!("Size of: ", stringify!(ImageInfoContainer))
    );
    assert_eq!(
        ::std::mem::align_of::<ImageInfoContainer>(),
        8usize,
        concat!("Alignment of ", stringify!(ImageInfoContainer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).height as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).black_levels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(black_levels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).white_levels as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(white_levels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImageInfoContainer>())).camera_neutral as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(camera_neutral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).xyz_to_cam as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(xyz_to_cam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImageInfoContainer>())).active_area as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageInfoContainer),
            "::",
            stringify!(active_area)
        )
    );
}
pub const ExifTag_ExposureTime: ExifTag = 0;
pub const ExifTag_ApertureValue: ExifTag = 1;
pub const ExifTag_CameraMake: ExifTag = 2;
pub const ExifTag_CameraModel: ExifTag = 3;
pub const ExifTag_ISOSpeedValue: ExifTag = 4;
pub type ExifTag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExifRational {
    pub numerator: ::std::os::raw::c_int,
    pub denominator: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ExifRational() {
    assert_eq!(
        ::std::mem::size_of::<ExifRational>(),
        8usize,
        concat!("Size of: ", stringify!(ExifRational))
    );
    assert_eq!(
        ::std::mem::align_of::<ExifRational>(),
        4usize,
        concat!("Alignment of ", stringify!(ExifRational))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExifRational>())).numerator as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExifRational),
            "::",
            stringify!(numerator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExifRational>())).denominator as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ExifRational),
            "::",
            stringify!(denominator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExifURational {
    pub numerator: ::std::os::raw::c_uint,
    pub denominator: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ExifURational() {
    assert_eq!(
        ::std::mem::size_of::<ExifURational>(),
        8usize,
        concat!("Size of: ", stringify!(ExifURational))
    );
    assert_eq!(
        ::std::mem::align_of::<ExifURational>(),
        4usize,
        concat!("Alignment of ", stringify!(ExifURational))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExifURational>())).numerator as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExifURational),
            "::",
            stringify!(numerator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExifURational>())).denominator as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ExifURational),
            "::",
            stringify!(denominator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExifBindings {
    pub get_uint: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_uint,
            arg3: ::std::os::raw::c_ushort,
            arg4: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
    >,
    pub get_urational: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_uint,
            arg3: ::std::os::raw::c_ushort,
            arg4: *mut ExifURational,
        ) -> ::std::os::raw::c_uint,
    >,
    pub get_rational: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_uint,
            arg3: ::std::os::raw::c_ushort,
            arg4: *mut ExifRational,
        ) -> ::std::os::raw::c_uint,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub free_rs_string:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char)>,
}
#[test]
fn bindgen_test_layout_ExifBindings() {
    assert_eq!(
        ::std::mem::size_of::<ExifBindings>(),
        40usize,
        concat!("Size of: ", stringify!(ExifBindings))
    );
    assert_eq!(
        ::std::mem::align_of::<ExifBindings>(),
        8usize,
        concat!("Alignment of ", stringify!(ExifBindings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExifBindings>())).get_uint as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExifBindings),
            "::",
            stringify!(get_uint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExifBindings>())).get_urational as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExifBindings),
            "::",
            stringify!(get_urational)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExifBindings>())).get_rational as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExifBindings),
            "::",
            stringify!(get_rational)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExifBindings>())).get_string as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ExifBindings),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExifBindings>())).free_rs_string as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ExifBindings),
            "::",
            stringify!(free_rs_string)
        )
    );
}
